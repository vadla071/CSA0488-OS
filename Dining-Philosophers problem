#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define EAT_COUNT 3 // Number of times each philosopher will eat

pthread_mutex_t forks[NUM_PHILOSOPHERS]; // Mutex locks representing forks

// Function prototypes
void *philosopher(void *arg);
void grab_forks(int philosopher_id);
void release_forks(int philosopher_id);
void eat(int philosopher_id);

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];

    // Initialize mutex locks for forks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        if (pthread_mutex_init(&forks[i], NULL) != 0) {
            perror("pthread_mutex_init");
            exit(EXIT_FAILURE);
        }
    }

    // Create threads for philosophers
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        if (pthread_create(&philosophers[i], NULL, philosopher, (void *)&i) != 0) {
            perror("pthread_create");
            exit(EXIT_FAILURE);
        }
    }

    // Wait for all threads to finish
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        if (pthread_join(philosophers[i], NULL) != 0) {
            perror("pthread_join");
            exit(EXIT_FAILURE);
        }
    }

    // Destroy mutex locks for forks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        if (pthread_mutex_destroy(&forks[i]) != 0) {
            perror("pthread_mutex_destroy");
            exit(EXIT_FAILURE);
        }
    }

    return 0;
}

void *philosopher(void *arg) {
    int philosopher_id = *((int *)arg);

    for (int i = 0; i < EAT_COUNT; i++) {
        // Think
        printf("Philosopher %d is thinking.\n", philosopher_id);

        // Grab forks (left and right)
        grab_forks(philosopher_id);

        // Eat
        eat(philosopher_id);

        // Release forks (left and right)
        release_forks(philosopher_id);
    }

    return NULL;
}

void grab_forks(int philosopher_id) {
    int left_fork = philosopher_id;
    int right_fork = (philosopher_id + 1) % NUM_PHILOSOPHERS;

    // Lock left and right forks (acquire mutex locks)
    pthread_mutex_lock(&forks[left_fork]);
    pthread_mutex_lock(&forks[right_fork]);

    printf("Philosopher %d has grabbed forks %d and %d.\n", philosopher_id, left_fork, right_fork);
}

void release_forks(int philosopher_id) {
    int left_fork = philosopher_id;
    int right_fork = (philosopher_id + 1) % NUM_PHILOSOPHERS;

    // Unlock left and right forks (release mutex locks)
    pthread_mutex_unlock(&forks[left_fork]);
    pthread_mutex_unlock(&forks[right_fork]);

    printf("Philosopher %d has released forks %d and %d.\n", philosopher_id, left_fork, right_fork);
}

void eat(int philosopher_id) {
    printf("Philosopher %d is eating.\n", philosopher_id);
    usleep(rand() % 1000000); // Simulate eating time
}
