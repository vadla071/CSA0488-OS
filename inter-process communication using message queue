#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>

#define MAX_SIZE 1024

// Define a structure for the message
struct message {
    long mtype; // Message type
    char mtext[MAX_SIZE]; // Message content
};

int main() {
    int msgid;
    key_t key;
    struct message msg;

    // Generate a unique key
    key = ftok(".", 'm');
    if (key == -1) {
        perror("ftok");
        exit(1);
    }

    // Create a message queue
    msgid = msgget(key, IPC_CREAT | 0666);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    // Send a message to the message queue
    msg.mtype = 1; // Set message type
    strncpy(msg.mtext, "Hello from the sender process!", MAX_SIZE);
    if (msgsnd(msgid, &msg, sizeof(msg.mtext), 0) == -1) {
        perror("msgsnd");
        exit(1);
    }

    printf("Sender Process: Message sent to the message queue\n");

    // Wait for a short while to simulate other processes doing work
    sleep(2);

    // Receive a message from the message queue
    if (msgrcv(msgid, &msg, sizeof(msg.mtext), 1, 0) == -1) {
        perror("msgrcv");
        exit(1);
    }

    printf("Receiver Process: Message received from the message queue: %s\n", msg.mtext);

    // Remove the message queue
    if (msgctl(msgid, IPC_RMID, NULL) == -1) {
        perror("msgctl");
        exit(1);
    }

    return 0;
}
