#include <stdio.h>

// Process structure
struct Process {
    int id; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
    int waiting_time; // Waiting time
    int turnaround_time; // Turnaround time
    int completed; // Flag to check if process completed
};

// Function to swap two processes
void swap(struct Process *a, struct Process *b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

// Function to perform SJF scheduling
void SJF(struct Process proc[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    float average_waiting_time, average_turnaround_time;
    
    // Sort processes based on arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (proc[j].arrival_time > proc[j + 1].arrival_time) {
                swap(&proc[j], &proc[j + 1]);
            }
        }
    }
    
    // Calculate completion time, waiting time, turnaround time
    for (int i = 0; i < n; i++) {
        if (i == 0) {
            proc[i].waiting_time = 0;
        } else {
            int total_burst = 0;
            for (int j = 0; j < i; j++) {
                total_burst += proc[j].burst_time;
            }
            proc[i].waiting_time = total_burst - proc[i].arrival_time;
        }
        
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
        
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
    }
    
    // Calculate average waiting time and turnaround time
    average_waiting_time = (float)total_waiting_time / n;
    average_turnaround_time = (float)total_turnaround_time / n;
    
    // Display process details and average times
    printf("Process ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].arrival_time, proc[i].burst_time, proc[i].waiting_time, proc[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);
    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    struct Process proc[n];
    
    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &proc[i].arrival_time, &proc[i].burst_time);
        proc[i].id = i + 1;
        proc[i].completed = 0;
    }
    
    // Perform SJF scheduling
    SJF(proc, n);
    
    return 0;
}
