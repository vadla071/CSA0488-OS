#include<stdio.h>

struct Process {
    int pid;
    int burst_time;
    int priority;
    int remaining_time;
};

void swap(struct Process *xp, struct Process *yp) {
    struct Process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sort_by_priority(struct Process processes[], int n) {
    int i, j;
    for (i = 0; i < n-1; i++)       
        for (j = 0; j < n-i-1; j++)
            if (processes[j].priority > processes[j+1].priority)
                swap(&processes[j], &processes[j+1]);
}

void execute_processes(struct Process processes[], int n) {
    int total_time = 0;
    int completed = 0;
    while (completed < n) {
        int min_priority = 9999;
        int selected_process = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].priority < min_priority) {
                min_priority = processes[i].priority;
                selected_process = i;
            }
        }
        if (selected_process == -1) {
            printf("No process available to execute.\n");
            break;
        }
        printf("Executing process %d for 1 unit.\n", processes[selected_process].pid);
        processes[selected_process].remaining_time--;
        total_time++;
        if (processes[selected_process].remaining_time == 0) {
            completed++;
            printf("Process %d completed.\n", processes[selected_process].pid);
        }
    }
    printf("Total time taken: %d units.\n", total_time);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    printf("Enter burst time and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }
    sort_by_priority(processes, n);
    execute_processes(processes, n);
    return 0;
}
