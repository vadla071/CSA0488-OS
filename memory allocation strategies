#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 100

// Memory block structure
struct MemoryBlock {
    int id; // Process ID
    int size; // Size of the block
    int allocated; // Flag to indicate whether the block is allocated (1) or free (0)
};

// Function prototypes
void initializeMemory(struct MemoryBlock memory[], int size);
void displayMemory(struct MemoryBlock memory[], int size);
void allocateFirstFit(struct MemoryBlock memory[], int size, int processId, int processSize);
void allocateBestFit(struct MemoryBlock memory[], int size, int processId, int processSize);
void allocateWorstFit(struct MemoryBlock memory[], int size, int processId, int processSize);

int main() {
    struct MemoryBlock memory[MEMORY_SIZE];
    int choice, processId, processSize;

    // Initialize memory blocks
    initializeMemory(memory, MEMORY_SIZE);

    // Menu for memory allocation strategies
    while (1) {
        printf("\nMemory Allocation Strategies:\n");
        printf("1. First Fit\n");
        printf("2. Best Fit\n");
        printf("3. Worst Fit\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter process ID: ");
                scanf("%d", &processId);
                printf("Enter process size: ");
                scanf("%d", &processSize);
                allocateFirstFit(memory, MEMORY_SIZE, processId, processSize);
                displayMemory(memory, MEMORY_SIZE);
                break;
            case 2:
                printf("Enter process ID: ");
                scanf("%d", &processId);
                printf("Enter process size: ");
                scanf("%d", &processSize);
                allocateBestFit(memory, MEMORY_SIZE, processId, processSize);
                displayMemory(memory, MEMORY_SIZE);
                break;
            case 3:
                printf("Enter process ID: ");
                scanf("%d", &processId);
                printf("Enter process size: ");
                scanf("%d", &processSize);
                allocateWorstFit(memory, MEMORY_SIZE, processId, processSize);
                displayMemory(memory, MEMORY_SIZE);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    }

    return 0;
}

// Initialize memory blocks
void initializeMemory(struct MemoryBlock memory[], int size) {
    for (int i = 0; i < size; i++) {
        memory[i].id = -1; // -1 indicates that the block is free
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

// Display memory blocks
void displayMemory(struct MemoryBlock memory[], int size) {
    printf("\nMemory Blocks:\n");
    printf("ID\tSize\tStatus\n");
    for (int i = 0; i < size; i++) {
        printf("%d\t%d\t%s\n", memory[i].id, memory[i].size, memory[i].allocated ? "Allocated" : "Free");
    }
}

// Allocate memory using First Fit strategy
void allocateFirstFit(struct MemoryBlock memory[], int size, int processId, int processSize) {
    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            memory[i].id = processId;
            memory[i].allocated = 1;
            break;
        }
    }
}

// Allocate memory using Best Fit strategy
void allocateBestFit(struct MemoryBlock memory[], int size, int processId, int processSize) {
    int bestFitIndex = -1;
    int bestFitSize = MEMORY_SIZE + 1;

    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize && memory[i].size < bestFitSize) {
            bestFitIndex = i;
            bestFitSize = memory[i].size;
        }
    }

    if (bestFitIndex != -1) {
        memory[bestFitIndex].id = processId;
        memory[bestFitIndex].allocated = 1;
    }
}

// Allocate memory using Worst Fit strategy
void allocateWorstFit(struct MemoryBlock memory[], int size, int processId, int processSize) {
    int worstFitIndex = -1;
    int worstFitSize = -1;

    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize && memory[i].size > worstFitSize) {
            worstFitIndex = i;
            worstFitSize = memory[i].size;
        }
    }

    if (worstFitIndex != -1) {
        memory[worstFitIndex].id = processId;
        memory[worstFitIndex].allocated = 1;
    }
}
