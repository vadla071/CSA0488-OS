#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 3
#define NUM_WRITERS 2

sem_t mutex, wrt;
int readersCount = 0, data = 0;

void *reader(void *arg) {
    while (1) {
        sem_wait(&mutex);
        readersCount++;
        if (readersCount == 1) {
            sem_wait(&wrt);
        }
        sem_post(&mutex);
        
        printf("Reader %ld read data: %d\n", (long)arg, data);
        
        sem_wait(&mutex);
        readersCount--;
        if (readersCount == 0) {
            sem_post(&wrt);
        }
        sem_post(&mutex);
        
        usleep(rand() % 1000000); // Sleep for random time
    }
}

void *writer(void *arg) {
    while (1) {
        sem_wait(&wrt);
        
        data++; // Write operation
        printf("Writer %ld wrote data: %d\n", (long)arg, data);
        
        sem_post(&wrt);
        
        usleep(rand() % 1000000); // Sleep for random time
    }
}

int main() {
    pthread_t readerThreads[NUM_READERS], writerThreads[NUM_WRITERS];
    
    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);
    
    // Create reader threads
    for (long i = 0; i < NUM_READERS; i++) {
        pthread_create(&readerThreads[i], NULL, reader, (void *)i);
    }
    
    // Create writer threads
    for (long i = 0; i < NUM_WRITERS; i++) {
        pthread_create(&writerThreads[i], NULL, writer, (void *)i);
    }
    
    // Join reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readerThreads[i], NULL);
    }
    
    // Join writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writerThreads[i], NULL);
    }
    
    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&wrt);
    
    return 0;
}
